#ifndef DDRADDOSE_H
#define DDRADDOSE_H


#include "DDG4/Geant4SteppingAction.h"
#include "DDG4/Geant4StepHandler.h"
#include "TH3.h"
#include "TFile.h"
#include "TString.h"
#include "TMath.h"
#include "TGraph.h"
#include "THnSparse.h"

/// Namespace for the AIDA detector description toolkit
namespace dd4hep {
        
  /// Namespace for the Geant4 based simulation part of the AIDA detector description toolkit
  namespace sim {

	class ddRadDose;

    class ddRadDose : public Geant4SteppingAction {
    
	protected:
	  //public:
	  DDG4_DEFINE_ACTION_CONSTRUCTORS(ddRadDose);
      /// Property: filename to output radiation map
      std::string  mRadiationMapOutputString  { };
	  int          mFileNumber { };
	  int          mNumEvents { };                   

	public:
				
  	  TFile * steppingOutput;
      
      //maps for ionizing dose
	  THnSparseF * eDepMap;   
      THnSparseF * densityMap;
      THnSparseF * stepMap;
      THnSparseF * rawSteps;

      //maps for 1 MEQ fluences
      THnSparseF * meqNeutronFluence;

	  //other important information 
	  TH1F * numEventsCounter; //needed to scaled the results by N_ev
	  TH1D * neutronEnergySpectrum; //needed to check energy spectrum of produced neutrons -- useful to compare different physics lists and processes

      //the binning is hard-coded on purpose - changing (increasing) can cause memory issues when running the simulations

      //standard binning for central detector + B0
      int num_x_bins_3D = 269;  //2cm in x
      int num_y_bins_3D = 1;//269;  //2cm in y
      int num_z_bins_3D = 1200; //1cm in z 1200 -- 5cm is 240

	  double x_min_3D = -269.0;
	  double x_max_3D = 269.0;

	  double y_min_3D = -1.0;//-269.0;
	  double y_max_3D = 1.0;//269.0;

	  double z_min_3D = -450; //-450 and -449.5
	  double z_max_3D =  750; //750  and 750.5
	 
	  Int_t bins[3] = {num_x_bins_3D, num_y_bins_3D, num_z_bins_3D};
	  Double_t min_values[3] = {x_min_3D, y_min_3D, z_min_3D};
	  Double_t max_values[3] = {x_max_3D, y_max_3D, z_max_3D};

       //very small bins for the SVT purposes
       
	  //int num_x_bins_3D = 420; //421  //1 millimeter in x
	  //int num_y_bins_3D = 420; //421  //1 millimeter in y
	  //int num_z_bins_3D = 500;        //2.0 millimeter in z
       
	  //double x_min_3D = -21.0; //-21.5
	  //double x_max_3D = 21.0;  //21.5
       
	  //double y_min_3D = -21.0;
	  //double y_max_3D = 21.0;
       
	  //double z_min_3D = -50.0; 
	  //double z_max_3D =  50.0;
       
 
      /// Standard constructor with initializing arguments
	  ddRadDose(Geant4Context* context, const std::string& name = "") : Geant4SteppingAction(context, name) {
	  	
		  declareProperty("radiationOutputString", mRadiationMapOutputString); //This is the basic string for radiation output
		  declareProperty("fileNumber", mFileNumber); //file number to append to radiation output string
		  declareProperty("numEvents", mNumEvents);  //number of simulated events needed for normalization
		
	  } ;

      /// Default destructor
      virtual ~ddRadDose() {
		  if (steppingOutput) {
		      steppingOutput->cd();
		      
			  eDepMap->Write();
			  densityMap->Write();
			  stepMap->Write();
			  rawSteps->Write();
	          meqNeutronFluence->Write();

			  numEventsCounter->Write();
			  neutronEnergySpectrum->Write();			  

		      steppingOutput->Close();
		      delete steppingOutput;
		  }		
      };

	  void initializeOutputFile(){
		  
		  TString tmp(mRadiationMapOutputString);
		  TString inputFileString;

          //change here to write output to correct directory for your own simulations 
		  inputFileString.Form("/gpfs02/eic/ajentsch/ePIC_dd4hep_simulations/radSimOutput/%s_%d.root", tmp.Data(), mFileNumber);
		  
		  std::cout << "Stepping radiation dose ---> output file = " << inputFileString << std::endl;
		
		  steppingOutput    = new TFile(inputFileString, "RECREATE");

		  eDepMap              = new THnSparseF("total_deposited_energy", "total_deposited_energy", 3, bins, min_values, max_values);
		  densityMap           = new THnSparseF("sum_density_steps", "sum_density_steps", 3, bins, min_values, max_values);
		  stepMap              = new THnSparseF("num_steps_bin_weighted", "num_steps_bin_weighted", 3, bins, min_values, max_values);
          rawSteps             = new THnSparseF("num_steps_bin", "num_steps_bin", 3, bins, min_values, max_values);
          meqNeutronFluence    = new THnSparseF("meq_neutron_fluence", "meq_neutron_fluence", 3, bins, min_values, max_values);

          numEventsCounter = new TH1F("num_events", "num_events", 1, 0, 1);
		  neutronEnergySpectrum = new TH1D("Log10_neutron_energy_spectrum", "Log10_neutron_energy_spectrum", 10000, -12, 6); //in MeV		 

 
	      eDepMap->Sumw2();
		  densityMap->Sumw2();
		  stepMap->Sumw2();
		  rawSteps->Sumw2();
		  meqNeutronFluence->Sumw2();		  


		  numEventsCounter->SetBinContent(1, mNumEvents);
		  
		  initialized = true;
	  }

	  /// Pre-track action callback
	  virtual void operator()(const G4Step* step, G4SteppingManager* mgr) override {
      
	      if(!initialized){initializeOutputFile();}
	  
	      G4Track * track = step->GetTrack();
		  const G4ThreeVector preStepLocation  = step->GetPreStepPoint()->GetPosition();
          const G4ThreeVector postStepLocation = step->GetPostStepPoint()->GetPosition();

		  const G4ThreeVector stepLocation = 0.5*(preStepLocation + postStepLocation); //midpoint of step
	  
		  int stepStatus = step->GetPreStepPoint()->GetStepStatus(); //to check if step is on boundary
		  
	      double stepDensity = step->GetPreStepPoint()->GetMaterial()->GetDensity(); //unsure of units mass/volume
	      stepDensity = stepDensity*(CLHEP::cm3)/(CLHEP::gram); // density in g/cm3
	  		  
		  double step_x      = stepLocation.x() / CLHEP::cm;
	      double step_y      = stepLocation.y() / CLHEP::cm;
	      double step_z      = stepLocation.z() / CLHEP::cm;
		
          if(step_x > x_max_3D || step_x < x_min_3D || step_y > y_max_3D || step_y < y_min_3D || step_z > z_max_3D || step_z < z_min_3D){ return; }

		  double step_length = step->GetStepLength()/ CLHEP::cm;
	  		      
	      int trackID = track->GetTrackID();
	      double eKin = track->GetKineticEnergy() / CLHEP::MeV; //in MeV for damage function calculation
	      int pdgCode = track->GetDefinition()->GetPDGEncoding();
	  
	      double eDeposit     = step->GetTotalEnergyDeposit() / CLHEP::keV;
		  double nielEDeposit = step->GetNonIonizingEnergyDeposit() / CLHEP::keV; 			 

		  Int_t NStepB = step_length + 0.5; //approximation to handle steps in gas with large bins - only for comparisons for MEQ fluence in G3/G4
          NStepB = TMath::Max(1, NStepB);
		  
		  if(stepDensity > 0.0 && step_length > 0.0 && eDeposit > 0.0 && step_z > z_min_3D && step_z < z_max_3D){ //2e-5 normal cut

              /******
                  for reference from G3 simulations -- do not remove
			      
                  Int_t NStepB = step_length + 0.5;
			      NStepB = TMath::Max(1, NStepB);
			      NStepB = 1;
			      step_length = step_length/NStepB;
			      eDeposit = eDeposit/NStepB;
			  *****/
          
              double density_factor = stepDensity*step_length; //density scaled by length of step - this is to handle different bin size with multiple materials in one bin
              double step_factor    = step_length;

			  eDepMap->Fill(step_x, step_y, step_z, eDeposit); 
			  densityMap->Fill(step_x, step_y, step_z, density_factor);
		      stepMap->Fill(step_x, step_y, step_z, step_factor);
			  rawSteps->Fill(step_x, step_y, step_z, 1.0);
          }
 
          //neutron MEQ fluences here
          if(pdgCode == 2112 && step_z > z_min_3D && step_z < z_max_3D && eKin > 1e-10 && eKin < 1e4){ //eKin cut is to ensure we don't extrapolate damage function outside of measured range

			  step_length = step_length/NStepB;

              double damageFunction = calcNeutronDamageFunc(eKin);
              meqNeutronFluence->Fill(step_x, step_y, step_z, damageFunction*step_length);
			  neutronEnergySpectrum->Fill(TMath::Log10(eKin)); //stored energy already in Log10

		  }

	  } //operator function
 
	double calcNeutronDamageFunc(double eKin){
	
	    static TGraph *graph = 0;
	
	    if (! graph) {
	
		Int_t n = 1381;
		double x[] = {1.025e-10,1.075e-10,1.125e-10,1.175e-10,1.238e-10,1.313e-10,1.388e-10,1.463e-10,1.55e-10,1.65e-10,1.75e-10,1.85e-10,1.95e-10,2.05e-10,2.15e-10,
		2.25e-10,2.35e-10,2.475e-10,2.625e-10,2.75e-10,2.9e-10,3.1e-10,3.3e-10,3.5e-10,3.7e-10,3.9e-10,4.125e-10,4.375e-10,4.625e-10,4.875e-10,
		5.125e-10,5.375e-10,5.625e-10,5.875e-10,6.15e-10,6.45e-10,6.75e-10,7.05e-10,7.4e-10,7.8e-10,8.2e-10,8.6e-10,9e-10,9.4e-10,9.8e-10,
		1.025e-09,1.075e-09,1.125e-09,1.175e-09,1.238e-09,1.313e-09,1.388e-09,1.463e-09,1.55e-09,1.65e-09,1.75e-09,1.85e-09,1.95e-09,2.05e-09,2.15e-09,
		2.25e-09,2.35e-09,2.475e-09,2.625e-09,2.75e-09,2.9e-09,3.1e-09,3.3e-09,3.5e-09,3.7e-09,3.9e-09,4.125e-09,4.375e-09,4.625e-09,4.875e-09,
		5.125e-09,5.375e-09,5.625e-09,5.875e-09,6.15e-09,6.45e-09,6.75e-09,7.05e-09,7.4e-09,7.8e-09,8.2e-09,8.6e-09,9e-09,9.4e-09,9.8e-09,
		1.025e-08,1.075e-08,1.125e-08,1.175e-08,1.238e-08,1.313e-08,1.388e-08,1.463e-08,1.55e-08,1.65e-08,1.75e-08,1.85e-08,1.95e-08,2.05e-08,2.15e-08,
		2.25e-08,2.35e-08,2.475e-08,2.625e-08,2.75e-08,2.9e-08,3.1e-08,3.3e-08,3.5e-08,3.7e-08,3.9e-08,4.125e-08,4.375e-08,4.625e-08,4.875e-08,
		5.125e-08,5.375e-08,5.625e-08,5.875e-08,6.15e-08,6.45e-08,6.75e-08,7.05e-08,7.4e-08,7.8e-08,8.2e-08,8.6e-08,9e-08,9.4e-08,9.8e-08,
		1.025e-07,1.075e-07,1.125e-07,1.175e-07,1.238e-07,1.313e-07,1.388e-07,1.463e-07,1.55e-07,1.65e-07,1.75e-07,1.85e-07,1.95e-07,2.05e-07,2.15e-07,
		2.25e-07,2.35e-07,2.475e-07,2.625e-07,2.75e-07,2.9e-07,3.1e-07,3.3e-07,3.5e-07,3.7e-07,3.9e-07,4.125e-07,4.375e-07,4.625e-07,4.875e-07,
		5.125e-07,5.375e-07,5.625e-07,5.875e-07,6.15e-07,6.45e-07,6.75e-07,7.05e-07,7.4e-07,7.8e-07,8.2e-07,8.6e-07,9e-07,9.4e-07,9.8e-07,
		1.025e-06,1.075e-06,1.125e-06,1.175e-06,1.238e-06,1.313e-06,1.388e-06,1.463e-06,1.55e-06,1.65e-06,1.75e-06,1.85e-06,1.95e-06,2.05e-06,2.15e-06,
		2.25e-06,2.35e-06,2.475e-06,2.625e-06,2.75e-06,2.9e-06,3.1e-06,3.3e-06,3.5e-06,3.7e-06,3.9e-06,4.125e-06,4.375e-06,4.625e-06,4.875e-06,
		5.125e-06,5.375e-06,5.625e-06,5.875e-06,6.15e-06,6.45e-06,6.75e-06,7.05e-06,7.4e-06,7.8e-06,8.2e-06,8.6e-06,9e-06,9.4e-06,9.8e-06,
		1.025e-05,1.075e-05,1.125e-05,1.175e-05,1.238e-05,1.313e-05,1.388e-05,1.463e-05,1.55e-05,1.65e-05,1.75e-05,1.85e-05,1.95e-05,2.05e-05,2.15e-05,
		2.25e-05,2.35e-05,2.475e-05,2.625e-05,2.75e-05,2.9e-05,3.1e-05,3.3e-05,3.5e-05,3.7e-05,3.9e-05,4.125e-05,4.375e-05,4.625e-05,4.875e-05,
		5.125e-05,5.375e-05,5.625e-05,5.875e-05,6.15e-05,6.45e-05,6.75e-05,7.05e-05,7.4e-05,7.8e-05,8.2e-05,8.6e-05,9e-05,9.4e-05,9.8e-05,
		0.0001025,0.0001075,0.0001125,0.0001175,0.0001238,0.0001313,0.0001388,0.0001463,0.000155,0.000165,0.000175,0.000185,0.000195,0.000205,0.000215,
		0.000225,0.000235,0.0002475,0.0002625,0.000275,0.00029,0.00031,0.00033,0.00035,0.00037,0.00039,0.0004125,0.0004375,0.0004625,0.0004875,
		0.0005125,0.0005375,0.0005625,0.0005875,0.000615,0.000645,0.000675,0.000705,0.00074,0.00078,0.00082,0.00086,0.0009,0.00094,0.00098,
		0.001025,0.001075,0.001125,0.001175,0.001238,0.001313,0.001388,0.001463,0.00155,0.00165,0.00175,0.00185,0.00195,0.00205,0.00215,
		0.00225,0.00235,0.002475,0.002625,0.00275,0.0029,0.0031,0.0033,0.0035,0.0037,0.0039,0.004125,0.004375,0.004625,0.004875,
		0.005125,0.005375,0.005625,0.005875,0.00615,0.00645,0.00675,0.00705,0.0074,0.0078,0.0082,0.0086,0.009,0.0094,0.0098,
		0.01025,0.01075,0.01125,0.01175,0.01238,0.01313,0.01388,0.01463,0.0155,0.0165,0.0175,0.0185,0.0195,0.0205,0.0215,
		0.0225,0.0235,0.02475,0.02625,0.0275,0.029,0.031,0.033,0.035,0.037,0.039,0.04125,0.04375,0.04625,0.04875,
		0.05125,0.05375,0.05625,0.05875,0.0615,0.0645,0.0675,0.0705,0.074,0.078,0.082,0.086,0.09,0.094,0.098,
		0.1025,0.1075,0.1125,0.1175,0.1238,0.1313,0.1388,0.1463,0.155,0.165,0.175,0.185,0.195,0.205,0.215,
		0.225,0.235,0.2475,0.2625,0.275,0.29,0.31,0.33,0.35,0.37,0.39,0.4125,0.4375,0.4625,0.4875,
		0.5125,0.5375,0.5625,0.5875,0.615,0.645,0.675,0.705,0.74,0.78,0.82,0.86,0.9,0.94,0.98,
		1.05,1.15,1.25,1.35,1.45,1.55,1.65,1.75,1.85,1.95,2.05,2.15,2.25,2.35,2.45,
		2.55,2.65,2.75,2.85,2.95,3.05,3.15,3.25,3.35,3.45,3.55,3.65,3.75,3.85,3.95,
		4.05,4.15,4.25,4.35,4.45,4.55,4.65,4.75,4.85,4.95,5.05,5.15,5.25,5.35,5.45,
		5.55,5.65,5.75,5.85,5.95,6.05,6.15,6.25,6.35,6.45,6.55,6.65,6.75,6.85,6.95,
		7.05,7.15,7.25,7.35,7.45,7.55,7.65,7.75,7.85,7.95,8.05,8.15,8.25,8.35,8.45,
		8.55,8.65,8.75,8.85,8.95,9.05,9.15,9.25,9.35,9.45,9.55,9.65,9.75,9.85,9.95,
		10.05,10.15,10.25,10.35,10.45,10.55,10.65,10.75,10.85,10.95,11.05,11.15,11.25,11.35,11.45,
		11.55,11.65,11.75,11.85,11.95,12.05,12.15,12.25,12.35,12.45,12.55,12.65,12.75,12.85,12.95,
		13.05,13.15,13.25,13.35,13.45,13.55,13.65,13.75,13.85,13.95,14.05,14.15,14.25,14.35,14.45,
		14.55,14.65,14.75,14.85,14.95,15.05,15.15,15.25,15.35,15.45,15.55,15.65,15.75,15.85,15.95,
		16.05,16.15,16.25,16.35,16.45,16.55,16.65,16.75,16.85,16.95,17.05,17.15,17.25,17.35,17.45,
		17.55,17.65,17.75,17.85,17.95,18.05,18.15,18.25,18.35,18.45,18.55,18.65,18.75,18.85,18.95,
		19.05,19.15,19.25,19.35,19.45,19.55,19.65,19.75,19.85,19.95,20,25,30,40,50,
		60,70,80,90,100,130,160,200,250,300,350,400,450,500,600,
		700,800,805,815,825,835,845,855,865,875,885,895,905,915,925,
		935,945,955,965,975,985,995,1005,1015,1025,1035,1045,1055,1065,1075,
		1085,1095,1105,1115,1125,1135,1145,1155,1165,1175,1185,1195,1205,1215,1225,
		1235,1245,1255,1265,1275,1285,1295,1305,1315,1325,1335,1345,1355,1365,1375,
		1385,1395,1405,1415,1425,1435,1445,1455,1465,1485,1495,1505,1515,1535,1545,
		1555,1565,1585,1595,1605,1615,1635,1645,1655,1665,1695,1705,1715,1735,1755,
		1765,1785,1795,1815,1835,1845,1855,1885,1895,1905,1915,1945,1955,1965,1985,
		2005,2015,2035,2045,2065,2085,2095,2105,2135,2145,2155,2165,2195,2205,2215,
		2235,2255,2265,2285,2295,2315,2335,2345,2355,2385,2395,2405,2415,2435,2445,
		2455,2465,2485,2495,2505,2515,2535,2545,2555,2565,2585,2595,2605,2615,2635,
		2645,2655,2665,2685,2695,2705,2715,2735,2745,2755,2765,2785,2795,2805,2815,
		2835,2845,2855,2865,2885,2895,2905,2915,2935,2945,2955,2965,2985,2995,3005,
		3015,3035,3045,3055,3065,3085,3095,3105,3115,3135,3145,3155,3165,3185,3195,
		3205,3215,3235,3245,3255,3265,3285,3295,3305,3315,3335,3345,3355,3365,3385,
		3395,3405,3415,3435,3445,3455,3465,3485,3495,3505,3515,3535,3545,3555,3565,
		3585,3595,3605,3615,3635,3645,3655,3665,3685,3695,3705,3715,3735,3745,3755,
		3765,3785,3795,3805,3815,3835,3845,3855,3865,3885,3895,3905,3915,3935,3945,
		3955,3965,3985,3995,4005,4015,4025,4035,4045,4055,4065,4075,4085,4095,4105,
		4115,4125,4135,4145,4155,4165,4175,4185,4195,4205,4215,4225,4235,4245,4255,
		4265,4275,4285,4295,4305,4315,4325,4335,4345,4355,4365,4375,4385,4395,4405,
		4415,4425,4435,4445,4455,4465,4475,4485,4495,4505,4515,4525,4535,4545,4555,
		4565,4575,4585,4595,4605,4615,4625,4635,4645,4655,4665,4675,4685,4695,4705,
		4715,4725,4735,4745,4755,4765,4775,4785,4795,4805,4815,4825,4835,4845,4855,
		4865,4875,4885,4895,4905,4915,4925,4935,4945,4955,4965,4975,4985,4995,5005,
		5015,5025,5035,5045,5055,5065,5075,5085,5095,5105,5115,5125,5135,5145,5155,
		5165,5175,5185,5195,5205,5215,5225,5235,5245,5255,5265,5275,5285,5295,5305,
		5315,5325,5335,5345,5355,5365,5375,5385,5395,5405,5415,5425,5435,5445,5455,
		5465,5475,5485,5495,5505,5515,5525,5535,5545,5555,5565,5575,5585,5595,5605,
		5615,5625,5635,5645,5655,5665,5675,5685,5695,5705,5715,5725,5735,5745,5755,
		5765,5775,5785,5795,5805,5815,5825,5835,5845,5855,5865,5875,5885,5895,5905,
		5915,5925,5935,5945,5955,5965,5975,5985,5995,6005,6015,6025,6035,6045,6055,
		6065,6075,6085,6095,6105,6115,6125,6135,6145,6155,6165,6175,6185,6195,6205,
		6215,6225,6235,6245,6255,6265,6275,6285,6295,6305,6315,6325,6335,6345,6355,
		6365,6375,6385,6395,6405,6415,6425,6435,6445,6455,6465,6475,6485,6495,6505,
		6515,6525,6535,6545,6555,6565,6575,6585,6595,6605,6615,6625,6635,6645,6655,
		6665,6675,6685,6695,6705,6715,6725,6735,6745,6755,6765,6775,6785,6795,6805,
		6815,6825,6835,6845,6855,6865,6875,6885,6895,6905,6915,6925,6935,6945,6955,
		6965,6975,6985,6995,7005,7015,7025,7035,7045,7055,7065,7075,7085,7095,7105,
		7115,7125,7135,7145,7155,7165,7185,7195,7205,7225,7235,7245,7255,7275,7285,
		7295,7315,7325,7335,7345,7365,7375,7385,7395,7415,7425,7435,7445,7465,7475,
		7485,7495,7515,7525,7535,7545,7565,7575,7585,7595,7615,7625,7635,7645,7665,
		7675,7685,7695,7715,7725,7735,7745,7765,7775,7785,7795,7815,7825,7835,7845,
		7865,7875,7885,7895,7915,7925,7935,7945,7965,7975,7985,7995,8015,8025,8035,
		8045,8065,8075,8085,8095,8115,8125,8135,8145,8165,8175,8185,8195,8215,8225,
		8235,8245,8265,8275,8285,8295,8315,8325,8335,8345,8365,8375,8385,8395,8415,
		8425,8435,8445,8465,8475,8485,8495,8515,8525,8535,8545,8565,8575,8585,8595,
		8615,8625,8635,8645,8665,8675,8685,8695,8715,8725,8735,8745,8765,8775,8785,
		8795,8815,8825,8835,8845,8865,8875,8885,8895,8915,8925,8935,8945,8965,8975,
		8995};

		double y[] = {0.01575,0.01537,0.01503,0.0147,0.01432,0.01391,0.01353,0.01317,0.0128,0.01242,0.01206,0.01172,0.01142,0.01113,
		0.01087,0.01063,0.01039,0.01013,0.009834,0.009609,0.009356,0.009048,0.00877,0.008516,0.00829,0.008075,0.007847,0.007622,0.00741,
		0.007219,0.007039,0.006875,0.006718,0.006575,0.006425,0.006274,0.006134,0.006002,0.005864,0.005709,0.005567,0.005438,0.005312,0.0052,
		0.005091,0.004978,0.004861,0.004751,0.004649,0.00453,0.004398,0.004278,0.004171,0.004049,0.003925,0.00381,0.003706,0.003609,0.00352,
		0.003437,0.00336,0.003287,0.003203,0.00311,0.003039,0.002962,0.002864,0.002776,0.002695,0.002621,0.002552,0.002482,0.002409,0.002344,
		0.002283,0.002226,0.002174,0.002125,0.002082,0.002034,0.001985,0.001941,0.001898,0.001853,0.001805,0.00176,0.001718,0.00168,0.001644,
		0.00161,0.001574,0.001537,0.001503,0.001472,0.001433,0.001392,0.001353,0.001318,0.00128,0.001241,0.001204,0.001172,0.001141,0.001113,
		0.001087,0.001062,0.00104,0.001013,0.0009841,0.0009619,0.0009359,0.0009058,0.0008773,0.0008523,0.0008285,0.0008073,0.0007847,0.0007619,0.000741,
		0.0007215,0.0007036,0.0006871,0.0006716,0.0006578,0.0006428,0.0006273,0.0006136,0.0006001,0.0005861,0.0005707,0.0005567,0.0005434,0.0005313,0.0005197,
		0.000509,0.0004976,0.0004864,0.0004753,0.0004646,0.0004531,0.0004397,0.0004279,0.0004166,0.0004049,0.0003924,0.000381,0.0003705,0.0003607,0.0003518,
		0.0003437,0.0003362,0.0003286,0.0003204,0.0003111,0.0003039,0.0002962,0.0002865,0.0002775,0.0002695,0.000262,0.0002551,0.0002483,0.000241,0.0002343,
		0.0002284,0.0002226,0.0002176,0.0002128,0.0002082,0.0002034,0.0001985,0.0001941,0.0001898,0.0001852,0.0001805,0.0001762,0.0001718,0.0001679,0.0001645,
		0.000161,0.0001575,0.0001542,0.0001508,0.0001474,0.0001434,0.0001393,0.0001356,0.0001318,0.0001281,0.0001242,0.0001204,0.0001172,0.0001141,0.0001114,
		0.000109,0.0001066,0.0001042,0.0001013,9.853e-05,9.627e-05,9.36e-05,9.056e-05,8.776e-05,8.513e-05,8.287e-05,8.065e-05,7.86e-05,7.644e-05,7.428e-05,
		7.217e-05,7.045e-05,6.885e-05,6.725e-05,6.569e-05,6.427e-05,6.278e-05,6.129e-05,5.998e-05,5.858e-05,5.701e-05,5.572e-05,5.45e-05,5.327e-05,5.205e-05,
		5.087e-05,4.981e-05,4.868e-05,4.754e-05,4.644e-05,4.531e-05,4.399e-05,4.274e-05,4.167e-05,4.045e-05,3.929e-05,3.821e-05,3.712e-05,3.607e-05,3.522e-05,
		3.442e-05,3.361e-05,3.284e-05,3.204e-05,3.11e-05,3.035e-05,2.959e-05,2.86e-05,2.778e-05,2.702e-05,2.625e-05,2.55e-05,2.483e-05,2.412e-05,2.342e-05,
		2.282e-05,2.227e-05,2.172e-05,2.123e-05,2.079e-05,2.03e-05,1.985e-05,1.944e-05,1.904e-05,1.856e-05,1.803e-05,1.761e-05,1.721e-05,1.681e-05,1.642e-05,
		1.61e-05,1.575e-05,1.536e-05,1.502e-05,1.47e-05,1.432e-05,1.393e-05,1.357e-05,1.321e-05,1.714e-05,6.792e-05,0.0001315,0.0001938,0.000225,0.0002433,
		0.0002614,0.0002754,0.0002867,0.0003007,0.0003177,0.0003318,0.0003486,0.0003712,0.0003937,0.0004163,0.0004388,0.0004613,0.0004865,0.0005146,0.0005426,
		0.0005706,0.0005985,0.0006264,0.0006543,0.0006822,0.0007128,0.0007462,0.0007795,0.0008128,0.0008515,0.0008957,0.0009399,0.000984,0.001028,0.001072,
		0.001116,0.001165,0.00122,0.001274,0.001329,0.001397,0.001478,0.001559,0.00164,0.001734,0.001842,0.001949,0.002056,0.002162,0.002269,
		0.002382,0.004405,0.002589,0.002717,0.002874,0.003004,0.003159,0.003366,0.003573,0.003778,0.003982,0.004186,0.004413,0.004666,0.004917,
		0.005492,0.005419,0.005662,0.005907,0.006151,0.006418,0.00671,0.006999,0.007285,0.007618,0.007998,0.008372,0.008745,0.009115,0.009477,
		0.009838,0.01024,0.01069,0.01115,0.01159,0.01213,0.01277,0.0134,0.01403,0.01557,0.01554,0.01634,0.0171,0.01782,0.01854,
		0.01926,0.01998,0.02069,0.0215,0.02245,0.02317,0.024,0.02509,0.02599,0.02675,0.02743,0.03247,0.02792,0.02739,0.02598,
		0.02288,0.01626,0.01485,0.5078,0.1145,0.07793,0.06706,0.06455,0.05988,0.05797,0.05636,0.05494,0.05374,0.05188,0.04992,
		0.0479,0.04526,0.04162,0.03764,0.03297,0.02645,0.01826,0.01121,0.0109,0.04848,0.2173,0.6987,1.196,1.162,0.971,
		0.8288,0.7334,0.6709,0.6172,0.5768,0.5547,0.5393,0.5237,0.5198,0.5097,0.5036,0.532,0.5403,0.5451,0.5581,
		0.574,0.5987,0.7554,1.28,0.5997,0.5425,0.5536,0.5786,0.6019,0.6724,0.9209,1.459,0.8318,0.9434,1.172,
		1.174,0.802,0.6578,0.968,0.941,1.079,1.128,1.766,0.8366,1.411,1.393,1.022,1.159,1.126,1.106,
		1.267,1.384,1.238,1.153,1.437,1.061,1.278,1.427,1.281,1.217,1.259,1.213,0.7506,1.235,1.187,
		1.452,1.431,1.147,1.782,1.442,1.509,1.498,1.673,2.003,1.717,1.579,1.612,1.831,1.605,1.336,
		1.277,1.567,1.616,1.929,1.794,1.468,1.666,1.364,1.9,1.641,1.514,1.314,1.611,1.778,1.577,
		1.521,1.77,1.47,1.803,1.818,1.793,1.757,1.794,1.866,1.861,1.992,1.806,1.663,1.743,1.768,
		1.782,1.771,1.769,1.589,1.685,1.871,1.876,1.686,1.619,1.751,1.824,1.767,1.669,1.707,1.754,
		1.78,1.76,1.782,1.764,1.772,1.709,1.696,1.674,1.726,1.765,1.765,1.736,1.68,1.692,1.735,
		1.765,1.778,1.767,1.751,1.754,1.767,1.784,1.812,1.816,1.822,1.791,1.757,1.837,1.856,1.85,
		1.853,1.862,1.828,1.793,1.806,1.839,1.802,1.78,1.804,1.87,1.808,1.787,1.817,1.83,1.843,
		1.845,1.791,1.765,1.774,1.808,1.813,1.773,1.801,1.842,1.841,1.828,1.808,1.806,1.817,1.858,
		1.891,1.899,1.899,1.893,1.88,1.869,1.918,1.97,1.952,1.929,1.935,1.94,1.937,1.934,1.935,
		1.932,1.917,1.906,1.914,1.926,1.951,1.974,1.965,1.95,1.938,1.926,1.945,1.986,2.008,1.999,
		1.989,1.974,1.96,1.955,1.953,1.953,1.955,1.958,1.963,1.969,1.975,2.071,2.049,2.041,2.012,
		1.805,1.644,1.499,1.378,1.264,1.168,0.974,0.865,0.791,0.733,0.696,0.693,0.685,0.685,0.681,
		0.679,0.677,0.672,0.6004,0.598,0.5959,0.5942,0.5932,0.5922,0.5912,0.5902,0.5892,0.5883,0.5873,0.5863,
		0.5854,0.5845,0.5836,0.5828,0.5819,0.581,0.5801,0.5793,0.5784,0.5773,0.5763,0.5752,0.5741,0.5734,0.5728,
		0.5722,0.5716,0.5711,0.5708,0.5704,0.5701,0.5698,0.5694,0.5691,0.5688,0.5684,0.5681,0.5678,0.5674,0.5671,
		0.5668,0.5664,0.5661,0.5658,0.5655,0.565,0.5643,0.5636,0.5628,0.5621,0.5614,0.5607,0.56,0.5593,0.5587,
		0.5581,0.5575,0.5569,0.5563,0.5557,0.5551,0.5545,0.5539,0.5533,0.5527,0.5515,0.551,0.5504,0.5498,0.5486,
		0.548,0.5474,0.5468,0.5457,0.5451,0.5445,0.5439,0.5427,0.5421,0.5416,0.541,0.5392,0.5387,0.5381,0.5369,
		0.5358,0.5354,0.5345,0.5341,0.5332,0.5323,0.5319,0.5315,0.5302,0.5297,0.5293,0.5289,0.5276,0.5272,0.5267,
		0.5259,0.525,0.5246,0.5237,0.5233,0.5225,0.5216,0.5212,0.5208,0.5195,0.5191,0.5187,0.5182,0.517,0.5166,
		0.5161,0.5153,0.5145,0.514,0.5137,0.5136,0.5134,0.5132,0.5131,0.513,0.5126,0.5125,0.5124,0.5123,0.5121,
		0.512,0.5119,0.5118,0.5115,0.5114,0.5113,0.5112,0.511,0.5109,0.5108,0.5107,0.5105,0.5104,0.5102,0.5101,
		0.5099,0.5098,0.5097,0.5096,0.5094,0.5093,0.5092,0.5091,0.5088,0.5087,0.5086,0.5085,0.5083,0.5082,0.5081,
		0.508,0.5078,0.5077,0.5076,0.5074,0.5072,0.5071,0.507,0.5069,0.5067,0.5066,0.5065,0.5064,0.5062,0.506,
		0.5059,0.5058,0.5056,0.5055,0.5054,0.5053,0.5051,0.505,0.5049,0.5048,0.5046,0.5044,0.5043,0.5042,0.504,
		0.5039,0.5038,0.5037,0.5035,0.5034,0.5033,0.5032,0.503,0.5028,0.5027,0.5026,0.5024,0.5023,0.5022,0.5021,
		0.5019,0.5018,0.5017,0.5016,0.5014,0.5013,0.5011,0.501,0.5008,0.5007,0.5006,0.5005,0.5003,0.5002,0.5001,
		0.5,0.4998,0.4997,0.4996,0.4995,0.4992,0.4991,0.499,0.4989,0.4987,0.4986,0.4985,0.4984,0.4982,0.4981,
		0.498,0.4979,0.4977,0.4976,0.4975,0.4974,0.4971,0.497,0.4969,0.4968,0.4966,0.4965,0.4964,0.4963,0.4961,
		0.496,0.4959,0.4958,0.4956,0.4955,0.4954,0.4953,0.4952,0.495,0.4949,0.4948,0.4947,0.4946,0.4945,0.4944,
		0.4943,0.4942,0.4941,0.494,0.4939,0.4938,0.4937,0.4936,0.4935,0.4934,0.4933,0.4932,0.4931,0.493,0.4929,
		0.4928,0.4927,0.4925,0.4924,0.4923,0.4922,0.4921,0.492,0.4919,0.4918,0.4917,0.4916,0.4915,0.4914,0.4913,
		0.4912,0.4911,0.491,0.4909,0.4908,0.4907,0.4906,0.4905,0.4904,0.4903,0.4902,0.4901,0.49,0.4899,0.4898,
		0.4897,0.4895,0.4894,0.4893,0.4892,0.4891,0.489,0.4889,0.4888,0.4887,0.4886,0.4885,0.4884,0.4883,0.4882,
		0.4881,0.488,0.4879,0.4878,0.4877,0.4876,0.4875,0.4874,0.4873,0.4872,0.4871,0.487,0.4869,0.4868,0.4867,
		0.4866,0.4865,0.4864,0.4863,0.4862,0.4861,0.486,0.4859,0.4858,0.4857,0.4856,0.4854,0.4853,0.4852,0.4851,
		0.485,0.4849,0.4848,0.4847,0.4846,0.4845,0.4844,0.4843,0.4842,0.4841,0.484,0.4839,0.4838,0.4837,0.4836,
		0.4835,0.4834,0.4833,0.4832,0.4831,0.483,0.4829,0.4828,0.4827,0.4826,0.4825,0.4824,0.4823,0.4822,0.4821,
		0.482,0.4819,0.4818,0.4817,0.4816,0.4815,0.4814,0.4813,0.4812,0.4811,0.481,0.4809,0.4808,0.4807,0.4806,
		0.4805,0.4804,0.4803,0.4802,0.4801,0.48,0.4799,0.4798,0.4797,0.4796,0.4795,0.4794,0.4793,0.4792,0.4791,
		0.479,0.4789,0.4788,0.4787,0.4786,0.4785,0.4784,0.4783,0.4782,0.4781,0.478,0.4779,0.4778,0.4777,0.4776,
		0.4775,0.4774,0.4773,0.4772,0.4771,0.477,0.4769,0.4768,0.4767,0.4766,0.4765,0.4764,0.4763,0.4762,0.4761,
		0.476,0.4759,0.4758,0.4757,0.4756,0.4755,0.4754,0.4753,0.4752,0.4751,0.475,0.4749,0.4748,0.4747,0.4746,
		0.4745,0.4744,0.4743,0.4742,0.4741,0.474,0.4739,0.4738,0.4737,0.4736,0.4735,0.4734,0.4733,0.4732,0.4731,
		0.473,0.4729,0.4728,0.4727,0.4726,0.4725,0.4724,0.4723,0.4722,0.4721,0.472,0.4719,0.4718,0.4717,0.4716,
		0.4715,0.4714,0.4713,0.4712,0.4711,0.471,0.4709,0.4708,0.4707,0.4706,0.4705,0.4704,0.4703,0.4702,0.4701,
		0.47,0.4699,0.4698,0.4697,0.4696,0.4695,0.4695,0.4694,0.4693,0.4692,0.4691,0.469,0.4689,0.4688,0.4687,
		0.4686,0.4685,0.4684,0.4683,0.4682,0.4681,0.468,0.4679,0.4678,0.4677,0.4676,0.4675,0.4674,0.4673,0.4672,
		0.4671,0.467,0.4669,0.4668,0.4667,0.4666,0.4665,0.4664,0.4663,0.4662,0.4661,0.466,0.4659,0.4658,0.4657,
		0.4656,0.4656,0.4655,0.4654,0.4653,0.4652,0.4651,0.465,0.4649,0.4648,0.4647,0.4646,0.4645,0.4644,0.4643,
		0.4642,0.4641,0.464,0.4639,0.4638,0.4637,0.4636,0.4634,0.4633,0.4632,0.463,0.4629,0.4628,0.4627,0.4626,
		0.4625,0.4624,0.4622,0.4621,0.462,0.4619,0.4617,0.4616,0.4615,0.4614,0.4612,0.4611,0.461,0.4609,0.4607,
		0.4606,0.4605,0.4604,0.4603,0.4602,0.4601,0.46,0.4598,0.4597,0.4596,0.4595,0.4593,0.4592,0.4591,0.459,
		0.4588,0.4587,0.4586,0.4585,0.4583,0.4582,0.4582,0.4581,0.4579,0.4578,0.4577,0.4576,0.4574,0.4573,0.4572,
		0.4571,0.4569,0.4568,0.4567,0.4566,0.4564,0.4564,0.4563,0.4562,0.456,0.4559,0.4558,0.4557,0.4555,0.4554,
		0.4553,0.4552,0.455,0.4549,0.4548,0.4547,0.4546,0.4545,0.4544,0.4543,0.4541,0.454,0.4539,0.4538,0.4536,
		0.4535,0.4534,0.4533,0.4531,0.4531,0.453,0.4529,0.4527,0.4526,0.4525,0.4524,0.4522,0.4521,0.452,0.4519,
		0.4517,0.4516,0.4516,0.4515,0.4513,0.4512,0.4511,0.451,0.4508,0.4507,0.4506,0.4505,0.4503,0.4502,0.4502,
		0.4501,0.4499,0.4498,0.4497,0.4496,0.4494,0.4493,0.4492,0.4491,0.4489,0.4489,0.4488,0.4487,0.4485,0.4484,
		0.4483,0.4482,0.448,0.4479,0.4478,0.4477,0.4476,0.4475,0.4474,0.4473,0.4471,0.447,0.4469,0.4468,0.4466,
		0.4465,0.4464};

		
	
            graph = new TGraph(n,x,y);
        }
    
	    return graph->Eval(eKin);
	
    }// end function to get damage function and interpolation between discrete points

 
     private:
	  //std::string mRadiationMapOutputString = "default_rad.root";
		 bool initialized = false;
	 
	 
  }; //class definition

  }    // End namespace sim
}      // End namespace dd4hep

#endif
